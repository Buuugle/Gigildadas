name: Build Multi-Platform

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            python-version: '3.13'
            cmake-preset: linux
          - os: windows-latest
            python-version: '3.13'
            cmake-preset: windows
          - os: macos-latest
            python-version: '3.13'
            cmake-preset: macos

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python headers (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3.13-dev

      - name: Install Python headers (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Python headers are included with python from setup-python action
          echo "Python headers should be available"

      - name: Configure CMake (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          PYTHON_INCLUDE=$(python3 -c "import sysconfig; print(sysconfig.get_path('include'))")
          echo "Python include path: $PYTHON_INCLUDE"
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPYTHON_INCLUDE_DIR="$PYTHON_INCLUDE"

      - name: Configure CMake (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $PYTHON_INCLUDE = python -c "import sysconfig; print(sysconfig.get_path('include'))"
          Write-Host "Python include path: $PYTHON_INCLUDE"
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DPYTHON_INCLUDE_DIR="$PYTHON_INCLUDE"

      - name: Build
        run: |
          cd build
          cmake --build . --config Release

      - name: Create output directory
        run: |
          mkdir -p artifacts/${{ matrix.os }}

      - name: Copy artifacts (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            cp gigildadas/container.so artifacts/${{ matrix.os }}/
          else
            cp gigildadas/container.dylib artifacts/${{ matrix.os }}/
          fi

      - name: Copy artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Copy-Item "gigildadas/container.dll" "artifacts/${{ matrix.os }}/"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: container-${{ matrix.os }}
          path: artifacts/${{ matrix.os }}/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/
          asset_name: container-multiplatform
          asset_content_type: application/zip