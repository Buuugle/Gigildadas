name: Build Container Library

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.13']
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install numpy

      - name: Install CMake (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      - name: Install CMake (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake

      - name: Install CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

      - name: Create build directory
        run: mkdir build

      - name: Configure CMake (Unix)
        if: runner.os != 'Windows'
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release

      - name: Configure CMake (macOS - Add feature test macro)
        if: runner.os == 'macOS'
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_FLAGS="-D_GNU_SOURCE"

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 17 2022"

      - name: Build project
        run: |
          cd build
          cmake --build . --config Release

      - name: Create gigildadas directory if it doesn't exist
        run: |
          mkdir -p gigildadas
        shell: bash

      - name: List build artifacts (Debug)
        run: |
          echo "Build directory contents:"
          ls -la build/
          echo "Gigildadas directory contents:"
          ls -la gigildadas/ || echo "gigildadas directory is empty or doesn't exist"
          echo "Looking for library files:"
          find . -name "*.so" -o -name "*.dylib" -o -name "*.dll" || echo "No library files found"
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: container-library-${{ matrix.os }}-python${{ matrix.python-version }}
          path: |
            gigildadas/
            build/
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Display structure of downloaded files
        run: ls -la

      - name: Create release archive
        run: |
          mkdir release
          cp -r container-library-*/* release/ 2>/dev/null || true
          tar -czf gigildadas-libraries.tar.gz release/

      - name: Create Release
        uses: actions/create-release@v1
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false